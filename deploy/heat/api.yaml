heat_template_version: queens
description: A load-balanced REST API server
parameters:
  image:
    type: string
    description: Image used for servers
  key:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the servers
  sqla_url:
    type: string
  metadata:
    type: json
  net:
    type: string
  subnet:
    type: string
    description: Subnet used by the server
  external_network:
    type: string
    description: public ip network
    default: public

resources:
  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: net }
      port_security_enabled: false
      fixed_ips:
        - subnet: { get_param: subnet }
  fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: port }
  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/sh -ex
            git clone https://github.com/pshchelo/refwebapp /opt/refwebapp
            cd /opt/refwebapp
            ./deploy/deps.sh
            curl https://bootstrap.pypa.io/get-pip.py | python3
            pip3 install .[pgsql]
            export REFWEBAPP_DB_URL="$SQLA_DB_URL"
            gunicorn -c deploy/wsgi/guconfig.py "refwebapp.app:create_app()"
          params:
            $SQLA_DB_URL: { get_param: sqla_url }
  server:
    type: OS::Nova::Server
    properties:
      flavor: {get_param: flavor}
      image: {get_param: image}
      key_name: {get_param: key}
      metadata: {get_param: metadata}
      user_data: {get_resource: config}
      user_data_format: RAW
      networks:
        - port: { get_resource: port }

outputs:
  floating_ip_address:
    description: Public IP address allocated
    value: { get_attr: [fip, floating_ip_address] }

heat_template_version: queens
parameters:
  key:
    type: string
    description: Name of Nova keypair to be used to access servers via SSH
  api_count:
    type: number
    default: 1
    description: Number of API servers to create initially
  api_min_count:
    type: number
    default: 1
    description: Min number of API servers to scale down to
  api_max_count:
    type: number
    default: 2
    description: Max number of API servers to scale up to
  db_image:
    type: string
    description: name or ID of Glance image to create a database server from
  db_flavor:
    type: string
    description: name or ID of Nova flavor to create database server with
  db_size:
    type: number
    description: size of the volume to create for database, in GB
    default: 1
  api_image:
    type: string
    description: name or ID of Glance image to create an API server from
  api_flavor:
    type: string
    description: name or ID of Nova flavor to create an API server with
  external_network:
    type: string
    description: name or ID of external network where to allocate a floating IP
    default: public

resources:
  db_password:
    type: OS::Heat::RandomString
  network:
    type: OS::Neutron::Net
    properties:
      port_security_enabled: false
  subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: network }
      cidr: 10.10.10.0/24
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_network }
  router_iface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet }

  database:
    type: Mirantis::RefWebApp::Database
    properties:
      image: { get_param: db_image }
      flavor: { get_param: db_flavor }
      key: { get_param: key }
      subnet: { get_resource: subnet }
      db_password: { get_attr: [ db_password, value ] }
      vol_size: { get_param: db_size }

  api:
    type: Mirantis::RefWebApp::RestApi
    properties:
      image: { get_param: api_image }
      flavor: { get_param: api_flavor }
      key: { get_param: key }
      net: { get_resource: network }
      subnet: { get_resource: subnet }
      external_network: { get_param: external_network }
      metadata: {"metering.server_group": {get_param: "OS::stack_id"}}
      sqla_url: { get_attr: [ database, sqla_url ] }

outputs:
  app_url:
    description: url of the webapp
    value:
      list_join:
      - ""
      - - "http://"
        - { get_attr: [api, floating_ip_address]}
        - ":8000"
